#-------------------------------------------------------------------------------
# General configuration
#-------------------------------------------------------------------------------
[general]


debug = False

# When `debug` is True, scanned images get shown on the screen as they get
# processed. If this is in the way, as you are debugging backend services, you
# can keep `debug` at `True` and set this value to `True` as well to get all the
# debug features but not be bothered with the images
hide_images_in_debug = False



#-------------------------------------------------------------------------------
# Configuration for where to find which binary
#-------------------------------------------------------------------------------
[programs]


# The binary to start Inkscape
inkscape = inkscape


# Default dpi for inkscape.
#
# This is 90 for Inkscape 0.91 and lower, and 96 for Inkscape 0.92 and later.
inkscape_dpi = 96


# The binary for ImageMagick's convert
convert = convert



#-------------------------------------------------------------------------------
# Configuration for directories
#-------------------------------------------------------------------------------
[directories]


# Directory for user generated content, relative to the Scanarium repo
# root directory.
dynamic = dynamic



#-------------------------------------------------------------------------------
# Configuration for image scanning
#-------------------------------------------------------------------------------
[scan]


# Source to get images from.
#
# `cam:<n>` denotes video camera `<n>`. On linux, this resolves to
# `/dev/video<n>`. So for example, `cam:2` would be `/dev/video2`.
# `image:<file_name>` denotes the still image file `<file_name>`. This allows
# to test on systems without cameras, or inject images that arrived through
# other means (E.g.: emails)
# Strings that do not start with `cam:` or `image:` are considered raw specs to
# OpenCV's VideoCapture contstructor.
source = cam:0


# The duration below which image grabs are considered stale.
#
# For scanarium, we always want to use the image that the camera is currently
# seeing. Some camera pipelines (E.g.: GStreamer pipelines) may buffer images.
# This means that if we only scan once in a while (E.g.: When only doing manual
# scans from the Web UI, OpenCV would give the next image, which might come
# from a buffer and might have been taken immediately after the previous scan.
# So it might be several minutes old). We want to skip past such old images and
# instead want to only use fresh images. As we cannot rely on cameras giving
# proper timestamps, we instead skip on the time it took to get the image, as
# buffered images typically get `grab`-bed much quicker than fresh images.
# Images that OpenCV `grab`s quicker than `minimum_grab_time` (in seconds) are
# considered old, stable images from the buffer, while images that take at
# least `minimum_grab_time` are considered fresh images. Leaving at the
# default of 0 considers every image a fresh image. Note that this value
# should be lower than `1 / frames-per-second-of-your-camera`. Otherwise,
# you'll consider most images stale.
# For example for a 21fps camera, 0.018 gives very reliable results on a board
# that is quick enough to convert the full stream.
minimum_grab_time = 0


# Parameters for camera calibration
#
# Typical camera pictures are distorted a bit and for examlpe do not preserve
# angles. This is in the way of best detection results. To improve detection
# quality, you can calibrate your camera. Scanarium can then use this
# calibration data and make up for part of the camera distortion, which leads to
# better image detection.
#
# Either leave this value empty to perform no distortion, or set it to the
# name of an XML file holding camera calibration data from OpenCV's
# interactive camera calibration tool. See
# https://docs.opencv.org/3.2.0/d7/d21/tutorial_interactive_calibration.html
calibration_xml_file =


# Image of maximum achievable brightness
#
# If empty, no brightness correction for badly lit corners gets applied before
# contour detection.
#
# If not empty, it should point to an image that exposes the maximum achievable
# brightness for each pixel (E.g.: Cover the scanned area with white paper and
# run `./show-source.sh --store-final` and set this parameter to the stored
# file). This image gets used to clip and stretch brightness for each pixel
# before contour detection to equalize strongly and weakly lit areas of the
# scanned image.
#
# This image has to match the resolution of the camera with applied
# `calibration_xml_file`.
max_brightness = 


# The white-balance filter to apply.
#
# Either `simple`, `grayworld`, or `none`.
# Since white-balance filters in some setups (E.g.: too little light) often
# distort colors of images, we do not perform white-balancing per default.
# More information about `simple` white-balancing is available at
# https://github.com/opencv/opencv_contrib/blob/master/modules/xphoto/src/simple_color_balance.cpp
# More information about `grapworld` white-balancing is available at
# https://github.com/opencv/opencv_contrib/blob/master/modules/xphoto/src/grayworld_white_balance.cpp
white_balance = none


# Whether to refine found corners to sub-pixel resolution
#
# Refining corners to sub-pixel resolution takes some time, but slightly
# improves accuracy for low-resolution cameras. For 720p cameras and beyond,
# the improvement is neglectible.
sub_pixel_corners = False


# Width of camera source
#
# If non-empty, force camera sources to the given width (in pixels)
# width. This is useful to force cameras to a given resolution, if
# they default to a non-optimal one.
width =


# Height of camera source
#
# If non-empty, force camera sources to the given height (in pixels)
# height. This is useful to force cameras to a given resolution, if
# they default to a non-optimal one.
height =


# Delay for frame grabbing from cameras
#
# Some cameras take some time after initialization to complete
# auto-white-balancing etc. So images grabbed early after
# initialization might be off-colour. By waiting some time, say 1
# second, such cameras allow to get way better images. The `delay`
# setting allows how specify long to wait (in seconds) before grabbing
# the frame from cameras. Leave empty for no waiting.
delay =


# Height of landscape standard paper.
#
# Only the ratio between height and width (see `paper_width` below)
# are used, so we do not have to worry about units.
#
# The defaults are for A4 landscape paper.
paper_height = 210


# Width of landscape standard paper (See `paper_height` above)
paper_width = 297



#-------------------------------------------------------------------------------
# Configuaration for the demo server
#-------------------------------------------------------------------------------
[demo_server]


# TCP port the demo server will listen on.
port = 8080



#-------------------------------------------------------------------------------
# Configuaration for each CGI script
#-------------------------------------------------------------------------------
[cgi]
# If not empty, use this value a DISPLAY environment variable when calling
# scripts as cgi through the webserver.  This is useful when doing remote
# debugging on a proper webserver and you want to enforce showing on a given
# display.
display =

[cgi:scan]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

[cgi:show-source]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

[cgi:regenerate-static-content]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

[cgi:reindex]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

[cgi:reset-dynamic-content]
# Whether or not to allow calling the script as cgi through the webserver.
allow = False

[cgi:dump-dynamic-config]
# Whether or not to allow calling the script as cgi through the webserver.
# This script is necessary for the frontend to work properly. So we enable it
# by default.
allow = True



#-------------------------------------------------------------------------------
# Below this line, it's standard Python logging configuration.
# By default, we log only INFO and above and we log to console.
# See https://docs.python.org/3/library/logging.config.html#logging-config-fileformat
# on how to override logging settings.

[loggers]
keys = root

[handlers]
keys = default

[formatters]
keys = default

[logger_root]
level = INFO
handlers = default
propagate = 1

[handler_default]
class=StreamHandler
formatter=default
args=(sys.stdout,)

[formatter_default]
format = %(asctime)s.%(msecs)03d %(levelname)-5s [%(threadName)s] %(filename)s:%(lineno)d - %(message)s
datefmt = %Y-%m-%dT%H:%M:%S
